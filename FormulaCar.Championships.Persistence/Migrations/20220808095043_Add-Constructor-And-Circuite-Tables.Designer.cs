// <auto-generated />
using System;
using FormulaCar.Championships.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormulaCar.Championships.Persistence.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    [Migration("20220808095043_Add-Constructor-And-Circuite-Tables")]
    partial class AddConstructorAndCircuiteTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FormulaCar.Championships.Domain.Entities.Circuite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int?>("MediaTagId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MediaTagId");

                    b.ToTable("Circuites", (string)null);
                });

            modelBuilder.Entity("FormulaCar.Championships.Domain.Entities.Constructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstApperance")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MediaTagId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MediaTagId");

                    b.ToTable("Constructors", (string)null);
                });

            modelBuilder.Entity("FormulaCar.Championships.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MediaTagId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("MediaTagId");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("FormulaCar.Championships.Domain.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MediaTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaTagId");

                    b.ToTable("Drivers", (string)null);
                });

            modelBuilder.Entity("FormulaCar.Championships.Domain.Entities.MediaTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MediaTags", (string)null);
                });

            modelBuilder.Entity("FormulaCar.Championships.Domain.Entities.Circuite", b =>
                {
                    b.HasOne("FormulaCar.Championships.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("FormulaCar.Championships.Domain.Entities.MediaTag", "MediaTag")
                        .WithMany()
                        .HasForeignKey("MediaTagId");

                    b.Navigation("Country");

                    b.Navigation("MediaTag");
                });

            modelBuilder.Entity("FormulaCar.Championships.Domain.Entities.Constructor", b =>
                {
                    b.HasOne("FormulaCar.Championships.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("FormulaCar.Championships.Domain.Entities.MediaTag", "MediaTag")
                        .WithMany()
                        .HasForeignKey("MediaTagId");

                    b.Navigation("Country");

                    b.Navigation("MediaTag");
                });

            modelBuilder.Entity("FormulaCar.Championships.Domain.Entities.Country", b =>
                {
                    b.HasOne("FormulaCar.Championships.Domain.Entities.MediaTag", "MediaTag")
                        .WithMany()
                        .HasForeignKey("MediaTagId");

                    b.Navigation("MediaTag");
                });

            modelBuilder.Entity("FormulaCar.Championships.Domain.Entities.Driver", b =>
                {
                    b.HasOne("FormulaCar.Championships.Domain.Entities.MediaTag", "MediaTag")
                        .WithMany()
                        .HasForeignKey("MediaTagId");

                    b.Navigation("MediaTag");
                });
#pragma warning restore 612, 618
        }
    }
}
